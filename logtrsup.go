// Copyright 2017 phcurtis fn Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package fn

import (
	"io"
	"log"
	"os"
	"sync"
)

// Shortcut flags defining which text to prefix to each log entry generated by the Logger.
const (
	LflagsOff   = 0                                         // use to shut off log flags
	LflagsMsecs = log.Ldate | log.Ltime | log.Lmicroseconds // log.logger log flags date+time+microseconds
	LflagsBasic = log.Ldate | log.Ltime                     // log.logger log flags date+time
	LflagsCmn   = log.Ldate | log.Ltime | log.Lshortfile    // log.logger log flags date+time+shortfname
	LflagsDef   = LflagsCmn                                 // default log.logger log flags
)

// Trace message labels used during LogTraceZZZ where ZZZ is blank/Msgs/Msgp"
const (
	LbegTraceLab     = "BegTrace:"
	LendTraceLab     = "EndTrace:"
	LbegTraceMsgsLab = "BegTrMsg:"
	LendTraceMsgsLab = "EndTrMsg:"
	LbegTraceMsgpLab = "BegTrMsp:"
	LendTraceMsgpLab = "EndTrMsp:"
)

var gopathsrc string

var logOutputDef *os.File
var logOutputCur io.Writer
var logAlignFile int
var logAlignFunc int

// Log related constants
const (
	LogAlignFileDef = 16 // log alignment 'file' field minimum width
	LogAlignFileMax = 50 // log alignment 'file' field minimum width max

	LogAlignFuncDef = 0  // log alignment 'func' field minimum width
	LogAlignFuncMax = 50 // log alignment 'func' field minimum width max

	LogPrefixDef = "LogFN: " // default log.logger log prefix
)

var logt *log.Logger
var muLogt sync.Mutex // mutex protecting logt stuff and trflags state

func init() {
	gopathsrc = os.Getenv("GOPATH")
	if gopathsrc != "" {
		gopathsrc += "/src/"
	}
	logOutputDef = os.Stdout
	logOutputCur = logOutputDef
	logt = log.New(logOutputDef, LogPrefixDef, LflagsDef)
	LogSetAlignFile(LogAlignFileDef)
	LogSetAlignFunc(LogAlignFuncDef)
}

// LogSetAlignFile - return alignment [minimum width] for filename stuff
func LogSetAlignFile(minWidth int) {
	muLogt.Lock()
	defer muLogt.Unlock()
	if minWidth > LogAlignFileMax {
		minWidth = LogAlignFileMax
	} else if minWidth < 0 {
		minWidth = 0
	}
	logAlignFile = minWidth
}

// LogAlignFile - return alignment [minimum width] for filename stuff
func LogAlignFile() int {
	muLogt.Lock()
	defer muLogt.Unlock()
	return logAlignFile
}

// LogSetAlignFunc - return alignment [minimum width] for funcname stuff
func LogSetAlignFunc(minWidth int) {
	muLogt.Lock()
	defer muLogt.Unlock()
	if minWidth > LogAlignFuncMax {
		minWidth = LogAlignFuncMax
	} else if minWidth < 0 {
		minWidth = 0
	}
	logAlignFunc = minWidth
}

// LogAlignFunc - return alignment [minimum width] for funcname stuff
func LogAlignFunc() int {
	muLogt.Lock()
	defer muLogt.Unlock()
	return logAlignFunc
}

// LogGetOutputDef - return log output default value
func LogGetOutputDef() io.Writer {
	muLogt.Lock()
	defer muLogt.Unlock()
	return logOutputDef
}

// lower level with no mutex
func logSetOutput(iowr io.Writer) {
	logt.SetOutput(iowr)
	logOutputCur = iowr
}

// LogSetOutput sets the output destination for the logger.
func LogSetOutput(iowr io.Writer) {
	muLogt.Lock()
	defer muLogt.Unlock()
	logSetOutput(iowr)
}

// LogGetOutput gets the output destination.
func LogGetOutput() io.Writer {
	muLogt.Lock()
	defer muLogt.Unlock()
	return logOutputCur
}

// LogSetFlags sets the output flags for the logger.
func LogSetFlags(lflags int) {
	muLogt.Lock()
	defer muLogt.Unlock()
	logt.SetFlags(lflags)
}

// LogFlags returns the log flags for the logger.
func LogFlags() int {
	muLogt.Lock()
	defer muLogt.Unlock()
	return logt.Flags()
}

// LogSetPrefix sets the output prefix for the logger.
func LogSetPrefix(prefix string) {
	muLogt.Lock()
	defer muLogt.Unlock()
	logt.SetPrefix(prefix)
}

// LogPrefix returns the output prefix for the logger.
func LogPrefix() string {
	muLogt.Lock()
	defer muLogt.Unlock()
	return logt.Prefix()
}

// [log] Trace Flags options referenced during LogTrace() and LogTraceMsgs()()
// funcs LogSetTraceFlags sets the Trace Flags and LogTraceFlags retrieves current trace flags.
const (
	Trlogignore      = 1 << iota // if set return before any processing (faster than ioutil.Discard)
	Trbegtime                    // print begin time
	Trendtime                    // print end time
	Trmicroseconds               // print microseconds on Tbegtime/Tendtime when active
	Trnodur                      // do not print duration
	Trfnbase                     // base version func name may want if log.Llongfile active
	Trfilenogps                  // when log.Llongfile active filename less gopath src portion
	Trfnobegref                  // do not print beg reference on EndTrZZZ
	Trfbegrefincfile             // include filename on beg reference on EndTrZZZ
	Trbegtimemicro   = Trbegtime | Trmicroseconds
	Trendtimemicro   = Trendtime | Trmicroseconds
	Trmicroboth      = Trbegtime | Trendtime | Trmicroseconds
	TrFlagsDef       = Trfilenogps | Trfnbase
	TrFlagsOff       = Trnodur | Trfnobegref
)

var logTraceFlags = TrFlagsDef

// LogSetTraceFlags - sets TrFlags.
func LogSetTraceFlags(t int) {
	muLogt.Lock()
	defer muLogt.Unlock()
	logTraceFlags = t
}

// LogTraceFlags - return current TrFlags value.
func LogTraceFlags() int {
	muLogt.Lock()
	defer muLogt.Unlock()
	return logTraceFlags
}
