// Package fn - includes APIs relating to function names (fn).
// Such as returning a given func name relative to its position on the
// call stack. Other APIs include returning all the func names on the
// call stack, and logging the entry and exiting of a func including
// its time duration.
package fn

import (
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

// Version of package fn
const Version = 0.01

// Level genealogy values for exported Lvl functions
const (
	Lme    = 0       // me
	Lpar   = Lme + 1 // parent
	Lgpar  = Lme + 2 // grandparent
	Lggpar = Lme + 3 // great-grandparent
)

const cStkEndPfix = "<EndOfCallStack:lvlll-lvl="

// nameform - contains form of func name to return
type nameform uint8

// list of forms of a func name to return
const (
	nfull nameform = 0 // full name form
	nbase nameform = 1 // filepath.Base form
)

// low level func getting a given 'lvl' func name
func lvlll(lvl int, nform nameform) string {
	const baselvl = 2
	pc := make([]uintptr, 10)
	runtime.Callers(baselvl+lvl, pc)
	name := runtime.FuncForPC(pc[0]).Name()
	if nform == nbase {
		name = filepath.Base(name)
	}
	if name == "" {
		name = fmt.Sprintf(cStkEndPfix+"%d>", lvl)
	}
	return name
}

// Lvl - returns the func name relative to levels back on
// caller stack it was invoked from. Use lvl=Lpar for parent func,
// lvl=Lgpar or lvl=2 for GrandParent and so on.
func Lvl(lvl int) string { return lvlll(lvl+Lpar, nfull) }

// LvlBase - returns the filepath.Base form of func name relative to
// levels back on caller stack it was invoked from.
func LvlBase(lvl int) string { return lvlll(lvl+Lpar, nbase) }

// Cur - returns the current func name relative to where it was invoked from.
func Cur() string { return lvlll(Lpar, nfull) }

// CurBase - returns the filepath.Base form of func name relative to
// where it it was invoked from.
func CurBase() string { return lvlll(Lpar, nbase) }

// MaxLvlCStk -- max Level call stack depth that LvlCStk will search too.
const MaxLvlCStk = 250

// LvlCStk returns func names in call stack for a given level relative
// to were it was invoked from; Typically one should use CStk instead.
// Use lvl=Lpar for parent func, lvl=LgPar for GrandParent and so on
func LvlCStk(lvl int) string {
	var name, sep string
	for i := lvl; i <= MaxLvlCStk; i++ {
		cname := Lvl(i + Lpar)
		if strings.HasPrefix(cname, cStkEndPfix) {
			break
		}
		name += sep + cname
		sep = "<--" // do not change - testing is dependent on this
	}
	return name
}

// CStk - returns func names in call stack relative to where it was invoked from.
func CStk() string { return LvlCStk(Lpar) }

// Shortcut flags defining which text to prefix to each log entry generated by the Logger.
const (
	LflagsOff   = 0                                         // use to shut off log flags
	LflagsMsecs = log.Ldate | log.Ltime | log.Lmicroseconds // log.logger log flags date+time+microseconds
	LflagsBasic = log.Ldate | log.Ltime                     // log.logger log flags date+time
	LflagsDef   = LflagsBasic                               // default log flags used in this package
)

// LogPrefixDef - default LogPrefix
const LogPrefixDef = "LogFN: "

var logt = log.New(os.Stdout, LogPrefixDef, LflagsDef)

// LogSetFlags sets the output flags for the logger.
func LogSetFlags(lflags int) {
	logt.SetFlags(lflags)
}

// LogSetOutput sets the output destination for the logger.
func LogSetOutput(iowr io.Writer) { logt.SetOutput(iowr) }

// LogPrefix returns the output prefix for the logger.
func LogPrefix() string { return logt.Prefix() }

// LogSetPrefix sets the output prefix for the logger.
func LogSetPrefix(prefix string) { logt.SetPrefix(prefix) }

// LogBeg logs the beginning of func;
// Idiomatic usage at func start:  defer fn.LogEnd(fn.LogBeg())
func LogBeg() string {
	fn1 := Lvl(Lpar)
	logt.Println("Beg:" + fn1)
	return fn1
}

// LogEnd logs the ending/leaving of a func;
// Idiomatic usage at func start: defer fn.LogEnd(fn.LogBeg())
func LogEnd(str string) string {
	logt.Println("End:" + str)
	return str
}

// LogBegDur logs the beginning of a func, captures time for duration;
// Idiomatic usage at func start: defer fn.LogEndDur(fn.LogBegDur())
func LogBegDur() (string, time.Time) {
	fn1 := Lvl(Lpar)
	logt.Println("BegDur:" + fn1)
	return fn1, time.Now()
}

// LogEndDur -- log ending or leaving of func with its time duration;
// Idiomatic usage at func start: defer fn.LogEndDur(fn.LogBegDur())
func LogEndDur(str string, begTime time.Time) (string, time.Duration) {
	dur := time.Now().Sub(begTime)
	logt.Printf("EndDur:%s Dur:%v", str, dur)
	return str, dur
}
